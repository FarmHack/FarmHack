<?php

include_once("opentools.features.inc");

/*
 * Get the context's Forum term.
 */

function opentools_init() {
  
  // Set global $context["opentools_space"]   
  opentools_set_active_space();

  if(arg(0) != 'admin' && arg(2) != 'edit') {
    drupal_add_css(drupal_get_path('module', 'opentools') . '/css/opentools.css');
  }

  // Reroute Wiki pages 
  if(arg(0) == "node" && is_numeric(arg(1)) && arg(2) != 'edit' && arg(2) != 'revisions') {
    $node = node_load(arg(1));
    if ($node->type == "wiki") {
      $space = opentools_get_active_space();
      if(is_array($space) && $parent = $space["object"]) {
        drupal_goto(drupal_get_path_alias("node/" . $space["id"]), array("fragment" => "wiki"));
      }
    }
  } 
  
  // Reroute Forum pages
  if(arg(0) == "forum" && is_numeric(arg(1)) && arg(2) != 'edit') {
    $space = opentools_get_active_space();
    if(is_array($space) && $space["object"]) {
      drupal_goto(drupal_get_path_alias("node/" . $space['id']), array('fragment'=> "forum"));
    }
  } 
}

function opentools_node_presave($node){
  if($node->type == 'opentools_event') {
    // Create a wiki page
    // Example from http://drupal.org/node/889058#comment-3709802
    $wiki = new StdClass();
    $wiki->title = $node->title;
    $wiki->type = 'wiki';
    $wiki->language = LANGUAGE_NONE;
    node_object_prepare($wiki);
    node_save($wiki);
    // Create a forum
    $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'forums'")->fetchField();
    
    $forum = (object) array(
      'name' => $node->title,
      'vid' => $vid,
      'parent' => array(33)
    );
    taxonomy_term_save($forum);
    // Save the tool with references to the new wiki page and forum 
    $node->field_event_to_wiki['und'][0]['target_id'] = $wiki->nid;
    $node->field_events_to_forum['und'][0]['tid'] = $forum->tid;
    
    //node_save($node);
  }
  if($node->type == 'opentools_tool' && $node->is_new) {
    // Create a wiki page
    // Example from http://drupal.org/node/889058#comment-3709802
    $wiki = new StdClass();
    $wiki->title = $node->title;
    $wiki->type = 'wiki';
    $wiki->language = LANGUAGE_NONE;
    node_object_prepare($wiki);
    node_save($wiki);
    // Create a forum
    $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'forums'")->fetchField();
    
    $forum = (object) array(
      'name' => $node->title,
      'vid' => $vid,
      'parent' => array(2)
    );
    taxonomy_term_save($forum);
    // Save the tool with references to the new wiki page and forum
    debug($wiki);
    $node->field_tool_to_wiki = array("und" => array(array('target_id' => $wiki->nid, 'target_type' => 'node')));
    $node->field_tool_to_forum = array("und" => array(array('tid' => $forum->tid)));
  }
}

function opentools_form_alter(&$form, &$form_state, $form_id) {
  // Hide unnecessary form item>s
  if(($form_id == "taxonomy_term_add_form_term" || $form_id == "taxonomy_form_term") && $form['#vocabulary']->machine_name == 'tools') {
   $form['field_tool_to_wiki']['#type'] = 'hidden';
   $form['field_tool_to_forum']['#type'] = 'hidden';
   // Drupal croaks if I hide these elements without css... 
   drupal_add_css('#edit-description-format, #edit-relations {display: none;}', $options['type']='inline');
   drupal_add_css('#block-system-main {display: block !important;}', $options['type']='inline');
   // $form['description']['#type'] = 'hidden';
   // $form['relations']['#type'] = 'hidden';
  }
  if($form_id == "taxonomy_term_add_form_term" && $form['#vocabulary']->machine_name == 'events') {
   $form['field_events_to_forum']['#type'] = 'hidden';
   $form['field_event_to_wiki']['#type'] = 'hidden';
   // Drupal croaks if I hide these elements without css... 
   drupal_add_css('#edit-description-format, #edit-relations {display: none;}', $options['type']='inline');
   //$form['description']['#type'] = 'hidden';
   //$form['relations']['#type'] = 'hidden';
  }

}

/*
 * "context" here refers to what Forum and Wiki page are relevant to a given
 * object.  For example, we may be currently viewing a Forum Topic node, which
 * belongs to a Forum term, which may have an Event or Tool pointing at it, and
 * that Tool or Event is pointing at a particular Forum term and Wiki node
 * which is relevant and IS our context.
 * 
 * @return Array of Forum TID and Wiki NID relevant to the current context.
 *  . 
 */ 


/*
 * Determines if there is an active object that we can determine a space from. Not just "Am I somewhere?" but 
 * "Am I somewhere that matters to Open Tools?"
 * 
 * Compatible context types include term_forum, node_forum_topic, node_tool, node_event, node_wiki  
 */

function opentools_get_context() {
  global $context;
  $context['opentools_context'] = array(
      "id" => NULL,
      "type" => NULL, 
      "object" => NULL
  );
  
  
  // We are in a Forum
  if(arg(0) == 'forum' && is_numeric(arg(1))) {
    $context['opentools_context']['object'] = taxonomy_term_load(arg(1));
    $context['opentools_context']['id'] = $context['opentools_context']['object']->tid;
    $context['opentools_context']['type'] = "term_forum";
    return TRUE;
  }
  // We are on a node
  elseif (arg(0) == 'node' && is_numeric(arg(1))) {
    $object = node_load(arg(1));
    $opentools_context_type = NULL;
    if ($object->type == "wiki") {
      $opentools_context_type = "node_wiki";
    }
    if ($object->type == "forum_topic") {
      $opentools_context_type = "node_forum_topic";
    } 
    if ($object->type == "opentools_event") {
      $opentools_context_type = "node_event";
    }
    if ($object->type == "opentools_tool") {
      $opentools_context_type = "node_tool";
    }
    if($opentools_context_type) {
      $context['opentools_context']['object'] = $object;
      $context['opentools_context']['id'] = $context['opentools_context']['object']->nid;
      $context['opentools_context']['type'] = $opentools_context_type;
      return $context;
    }
  }
  
  // We are on a taxonomy term page
  // @todo We could get context on edit pages as well but I dont think we care right now. 
  /*
  elseif (arg(0) == 'taxonomy' && arg(1) == "term" && is_numeric(arg(2))) {
    $object = menu_get_object('taxonomy_term', 2);
  }
  */
  
  return FALSE;
}


/*
 * Given a supported object and object type, figure out if that object is in a given space.
 * Compatible context types include term_forum, node_forum_topic, node_tool, node_event, node_wiki  
 */

function opentools_set_active_space($reset = FALSE) {
  
  global $context;
  
  if($context["opentools_space"] && $reset === FALSE) { 
    return; 
  }
  
  // Check to see if we aleady have a context to work from or if we can get one.
  if(!$context["opentools_context"] && !opentools_get_context()) {
    return;
  }
  
  //  At this point we should have figured out what our relevant context is that we'll
  //  want to use to travel back to figure out what our space is. 
  $cntxt = $context["opentools_context"]; 
  $context["opentools_space"] = array(
    "id" => NULL,
    "type" => NULL, // Either going to be a node_tool or a node_event
    "object" => NULL
  );
  
  // If cntxt is a Forum topic, then move our way up to the parent forum term
  if($cntxt["type"] == "node_forum_topic") { 
    $cntxt["object"] = taxonomy_term_load($cntxt["object"]->taxonomy_forums['und'][0]['tid']);
    $cntxt["type"] = "term_forum";
    $cntxt["id"] = $cntxt['object']->tid;  
  }

  // If cntxt is a Forum term, then find the parent Event or Tool 
  if($cntxt["type"] == "term_forum") {
    $cntxt = opentools_get_space_for_forum($cntxt['object']);
  }

  // If cntxt is a Wiki page, then find the parent Event or Tool
  if($cntxt["type"] == "node_wiki") { 
    $cntxt = opentools_get_space_for_wiki($cntxt['object']);
  }

  // Check to see if we're reached a righteous opentools space
  if ($cntxt["type"] == "node_event" || $cntxt["type"] == "node_tool") {
    $context["opentools_space"]["wiki"] = $cntxt['object']->field_tool_to_wiki['und'][0]['target_id'];
    $context["opentools_space"]["forum"] = $cntxt['object']->field_tool_to_forum['und'][0]['tid'];
    $context["opentools_space"]["id"] = $cntxt['id'];
    $context["opentools_space"]["object"] = $cntxt['object'];
    $context["opentools_space"]["type"] = $cntxt['type'];
  }
}

function opentools_get_active_space($reset = FALSE) {
  global $context;
  if ($reset) {
    opentools_set_active_space(TRUE);
  }
  if (is_array($context) && array_key_exists("opentools_space", $context)) {
    return $context["opentools_space"];
  }
}


/*
 * 
 */
function opentools_get_space_for_forum($term) {
  $tid = $term->tid;
  // Check all Tools
  $sql = "SELECT node.title AS node_title, node.nid AS nid, node.created AS node_created
  FROM 
  {node} node
  INNER JOIN {field_data_field_tool_to_forum} field_data_field_tool_to_forum ON node.nid = field_data_field_tool_to_forum.entity_id AND (field_data_field_tool_to_forum.entity_type = 'node' AND field_data_field_tool_to_forum.deleted = '0')
  WHERE (( (node.status = '1') AND (field_data_field_tool_to_forum.field_tool_to_forum_tid = '$tid') ))";
  $results = db_query($sql);
  foreach($results as $result) {
    return array(
      "id" => $result->nid,
      "type" => "node_tool",
      "object" => node_load($result->nid)
      );
  }
  /* @todo
  // Check all Events
  $sql = "SELECT taxonomy_term_data.name AS taxonomy_term_data_name, taxonomy_term_data.vid AS taxonomy_term_data_vid, taxonomy_term_data.tid AS tid, taxonomy_vocabulary.machine_name AS taxonomy_vocabulary_machine_name
  FROM 
  {taxonomy_term_data} taxonomy_term_data
  LEFT JOIN {field_data_field_events_to_forum} field_data_field_events_to_forum ON taxonomy_term_data.tid = field_data_field_events_to_forum.entity_id AND (field_data_field_events_to_forum.entity_type = 'taxonomy_term' AND field_data_field_events_to_forum.deleted = '0')
  LEFT JOIN {taxonomy_vocabulary} taxonomy_vocabulary ON taxonomy_term_data.vid = taxonomy_vocabulary.vid
  WHERE (( (field_data_field_events_to_forum.field_events_to_forum_tid = '$tid' ) ))";
   $results = db_query($sql);
  foreach($results as $result) {
    return taxonomy_term_load($result->tid);
  }
  */
}

/*
 * 
 */
function opentools_get_space_for_wiki($node) {
  $nid = $node->nid;
  // Check all Tools
  $sql = "SELECT node.title AS node_title, node.nid AS nid, node.created AS node_created
  FROM 
  {node} node
  LEFT JOIN {field_data_field_tool_to_wiki} field_data_field_tool_to_wiki ON node.nid = field_data_field_tool_to_wiki.entity_id AND (field_data_field_tool_to_wiki.entity_type = 'node' AND field_data_field_tool_to_wiki.deleted = '0')
  WHERE (( (node.status = '1') AND (field_data_field_tool_to_wiki.field_tool_to_wiki_target_id = '$nid') ))";
  $results = db_query($sql);
  foreach($results as $result) {
    return node_load($result->nid);
  }
/* @todo 
  // Check all Events
  $sql = "SELECT taxonomy_term_data.name AS taxonomy_term_data_name, taxonomy_term_data.vid AS taxonomy_term_data_vid, taxonomy_term_data.tid AS tid, taxonomy_vocabulary.machine_name AS taxonomy_vocabulary_machine_name
  FROM
  {taxonomy_term_data} taxonomy_term_data
  LEFT JOIN {field_data_field_event_to_wiki} field_data_field_event_to_wiki ON taxonomy_term_data.tid = field_data_field_event_to_wiki.entity_id AND (field_data_field_event_to_wiki.entity_type = 'taxonomy_term' AND field_data_field_event_to_wiki.deleted = '0')
  LEFT JOIN {taxonomy_vocabulary} taxonomy_vocabulary ON taxonomy_term_data.vid = taxonomy_vocabulary.vid
  WHERE (( (field_data_field_event_to_wiki.field_event_to_wiki_target_id = '$nid' ) ))";
  $results = db_query($sql);
  foreach($results as $result) {
    return taxonomy_term_load($result->tid);
  }
*/
} 


function opentools_get_forum_context_ancestry($tid = NULL) {
  $ancestry = array();
  // Get parent's ancestry
  if (is_numeric($tid)) {
    $parents = taxonomy_get_parents($tid);
    foreach ($parents as $parent) {
      $ancestry[] = $parent->tid;
    }
  } 
  else {
    $ancestry = NULL;
  }
  return $ancestry;
}
